<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Validator;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\UserAddress;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

use App\Mail\PasswordResetMail;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\URL;
use Aws\Sns\SnsClient;
use CloudinaryLabs\CloudinaryLaravel\Facades\Cloudinary;

class LoginController extends Controller
{
    const CONTROLLER_NAME = "App\Http\Controllers\LoginController";

    public function LoginUser(Request $request){
    $validator = Validator::make($request->all(), [
        'user_name' => 'required',
        'password' => 'required|min:6',
    ]);
    if ($validator->fails()) {
        return $this->actionFailure($validator->errors()->first());
    }
    try{
    $user = User::where('phone', $request->user_name)->orWhere('email', $request->user_name)->first();
    if ($user && Hash::check($request->password, $user->password)) {
        $data = [
            'email' => $user->email,
            'phone' => $user->phone,
            'password' => $request->password,
        ];
        auth()->attempt($data);

        $token = $user->createToken('tokens')->plainTextToken;
        $response['access_token'] = $token;
        $response['permissions'] = $user->getPermissionsViaRoles();
        $response['user'] = $user;

        return $this->actionSuccess("Login Successfully", $response);
    }
    } catch (\Exception $e) {
        createExceptionError($e, self::CONTROLLER_NAME, __FUNCTION__ );
        return $this->actionFailure($e->getMessage());
    }
    return $this->actionFailure('email or Password incorrect!');
}

public function logout(Request $request)
{
    $tokenId = Str::before($request->bearerToken(), '|');
    DB::table('personal_access_tokens')->where('id', $tokenId)->delete();
    return $this->actionSuccess('Logged out successfully');
}

public function registerUser(Request $request)
{
    $validator = Validator::make($request->all(), [
        'name' => 'required',
        'email' => 'required|email|unique:users,email',
        'password' => 'required|same:confirm_password',
        'phone_code' => 'required|string',
        'phone' => 'required|string',
        'profile_image' => 'nullable|image|mimes:jpg,jpeg,png,gif,svg,webp|max:2048',
        'secondary_number' => 'nullable|string',
        'account_type' => 'required|in:Admin,User',
        'country_id' => 'required',
        'state_id' => 'required',
        'city_id' => 'required',
        'pin_code' => 'required'
    ]);
    
    if ($validator->fails()) {
        return $this->actionFailure($validator->errors()->first());
    }
    
    if(User::where('email', $request->email)->exists()) {
        return $this->actionFailure("Your Email Already Exists!");
    }
    
    if(User::where('phone', $request->phone)->exists()) {
        return $this->actionFailure("Your phone Number Already Exists!");
    }
    
    DB::beginTransaction();
    try {
        $image_url = null;
        $image_public_id = null;
        if ($request->hasFile('profile_image')) {
            $uploadedFile = $request->file('profile_image');
            $uploadResult = Cloudinary::upload($uploadedFile->getRealPath(), [
                'folder' => 'users',
            ]);
            $image_url = $uploadResult->getSecurePath();
            $image_public_id = $uploadResult->getPublicId();
        }

        $create = [
            'name' => $request->name,
            'email' => $request->email,
            'gender' => $request->gender,
            'account_type' => $request->account_type,
            'phone_code' => $request->phone_code,
            'phone' => $request->phone,
            'secondary_number' => $request->secondary_number,
            'search_key' => $request->name . $request->email . $request->phone . $request->secondary_number,
            'is_buyer' => $request->is_buyer == 'false' || $request->is_buyer == false ? false :true,
            'is_seller' => $request->is_seller == 'false' || $request->is_seller == false ? false :true,
            'is_labor' => $request->is_labor == 'false' || $request->is_labor == false ? false :true,
            'image_url' => $image_url,
            'image_public_id' => $image_public_id,
            'phone_verified_at' => now(),
            'email_verified_at' => now(),
            'password' => Hash::make($request->password),
        ];
        
        $user = User::create($create);
        
        // Assign roles to users
        $role_ids = Role::where('slug', 'user')->pluck('uuid')->toArray();
        updateUserRoles($role_ids, $user);

        UserAddress::create([
            'user_id' => $user->uuid,
            'country_id' => $request->country_id,
            'state_id' => $request->state_id,
            'city_id' => $request->city_id,
            'pin_code' => $request->pin_code,
            'home_no' => $request->home_no,
            'full_address' => $request->full_address,
        ]);

        DB::commit();
        return $this->actionSuccess('User created successfully', $user);
    } catch (\Exception $e) {
        DB::rollBack();
        createExceptionError($e, self::CONTROLLER_NAME, __FUNCTION__);
        return $this->actionFailure($e->getMessage());
    }
}
public function forgotPassword(Request $request)
{
    // Validate email and type
    $validator = Validator::make($request->all(), [
        'email' => 'required|email|exists:users,email',
        'type' => 'required|in:direct,email,phone',
    ]);

    if ($validator->fails()) {
        return $this->actionFailure($validator->errors()->first());
    }

    // Find the user by email
    $user = User::where('email', $request->email)->first();

    // Handle 'direct' type password reset
    if ($request->type == 'direct') {
        $password = "qwerty123"; // New temporary password
        $user->password = Hash::make($password);
        $user->save();

        return $this->actionSuccess("Your new password is: $password", $user);
    }
    return $this->actionFailure('Failed to send password reset link!');

    
    // TODO: Up - coming 
    // Generate temporary signed URL valid for 30 minutes
    $resetUrl = URL::temporarySignedRoute(
        'password.reset', now()->addMinutes(30), ['user' => $user->id]
    );

    if ($request->type == 'email') {
        // Send reset link via email using AWS SES
        // Mail::to($user->email)->send(new PasswordResetMail($resetUrl));

        return $this->actionSuccess('Password reset link sent to your email successfully', $user);
    }

    if ($request->type == 'phone') {
        $smsMessage = "Click the link to reset your password: $resetUrl";
        $this->sendSms($user->phone, $smsMessage);
        return $this->actionSuccess('Password reset link sent to your phone successfully', $user);
    }

    return $this->actionFailure('Failed to send password reset link!');
}

    // Helper function to send SMS using AWS SNS
    private function sendSms($phoneNumber, $message)
    {
        $sns = new SnsClient([
            'region' => env('AWS_DEFAULT_REGION'),
            'version' => '2010-03-31',
            'credentials' => [
                'key' => env('AWS_ACCESS_KEY_ID'),
                'secret' => env('AWS_SECRET_ACCESS_KEY'),
            ],
        ]);

        $sns->publish([
            'Message' => $message,
            'PhoneNumber' => $phoneNumber,
        ]);
    }

} 


Step 2
<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class PasswordResetMail extends Mailable
{
    use Queueable, SerializesModels;

    public $resetUrl;

    /**
     * Create a new message instance.
     *
     * @param string $resetUrl
     */
    public function __construct($resetUrl)
    {
        $this->resetUrl = $resetUrl;
    }

    /**
     * Build the message.
     *
     * @return $this
     */
    public function build()
    {
        return $this->subject('Password Reset Request')
                    ->view('emails.password_reset')
                    ->with([
                        'resetUrl' => $this->resetUrl,
                    ]);
    }
}

Step 3
3. View: resources/views/emails/password_reset.blade.php

<!DOCTYPE html>
<html>
<head>
    <title>Password Reset</title>
</head>
<body>
    <h1>Password Reset Request</h1>
    <p>Click the link below to reset your password:</p>
    <a href="{{ $resetUrl }}">{{ $resetUrl }}</a>
    <p>This link will expire in 30 minutes.</p>
</body>
</html>

Step 4
use App\Http\Controllers\AuthController;

Route::post('/forgot-password', [AuthController::class, 'forgotPassword'])->name('password.forgot');
Route::get('/password/reset', [AuthController::class, 'resetPassword'])->name('password.reset');

Step 5; 5. AWS SNS and SES Configuration: config/services.php
'aws' => [
    'key' => env('AWS_ACCESS_KEY_ID'),
    'secret' => env('AWS_SECRET_ACCESS_KEY'),
    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    'sns_version' => '2010-03-31', // SNS for SMS
    'ses_version' => '2010-12-01', // SES for Email
],

step 6  .env
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key
AWS_DEFAULT_REGION=your-aws-region

